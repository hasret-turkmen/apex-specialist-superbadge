Build unit tests for the class WarehouseSyncSchedule in a class named WarehouseSyncScheduleTest. 
You must have 100% test coverage to pass this challenge and assert values to prove that your logic is working as expected.

WAREHOUSESYNCSCHEDULETEST
@isTest
public with sharing class WarehouseSyncScheduleTest {
    @isTest static void testScheduledJob() {
        String CRON_EXP = '0 0 0 15 3 ? 2022';
        Test.startTest();
        String jobid = System.schedule('EquipTest', CRON_EXP, new WarehouseSyncSchedule());
        Test.stopTest();
        CronTrigger ct = [SELECT State FROM CronTrigger WHERE ID = :jobId];
        System.assertEquals('WAITING', String.valueOf(ct.State));
    }
}

WAREHOUSECALLOUTSERVICEMOCK
@isTest
global class WarehouseCalloutServiceMock implements HttpCalloutMock {
    // implement http mock callout
    global HttpResponse respond(HttpRequest request){
        
        System.assertEquals('https://th-superbadge-apex.herokuapp.com/equipment', request.getEndpoint());
        System.assertEquals('GET', request.getMethod());
        
      // Create a fake response
    HttpResponse response = new HttpResponse();
        response.setHeader('Content-Type', 'application/json');
    response.setBody('[{"_id":"55d66226726b611100aaf741","replacement":false,"quantity":5,"name":"Generator 1000 kW","maintenanceperiod":365,"lifespan":120,"cost":5000,"sku":"100003"}]');
        response.setStatusCode(200);
        return response;
    }
}

WAREHOUSECALLOUTSERVICETEST
@isTest
private class WarehouseCalloutServiceTest {
  // implement your mock callout test here
  @isTest
    static void WarehouseEquipmentSync(){
        Test.startTest();
        // Set mock callout class 
        Test.setMock(HttpCalloutMock.class, new WarehouseCalloutServiceMock()); 
        // This causes a fake response to be sent from the class that implements HttpCalloutMock. 
        WarehouseSyncSchedule syncMe = new WarehouseSyncSchedule();
        Datetime dt = Datetime.now().addMinutes(3);
        String CRON_EXP = '0 '+ dt.minute() + ' * ' + dt.day() + ' ' + dt.month() + ' ? ' + dt.year();
        String jobID = System.schedule('Test the Queue Status', CRON_EXP, syncMe);
        CronTrigger cTId = [SELECT State FROM CronTrigger WHERE Id = :jobID];
        System.assertEquals('WAITING', String.valueOf(cTId.State), 'jobID Doesnt Match');
        Test.stopTest();             
        
    }
    
}



