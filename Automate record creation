/* Install the unlocked package and configure the development org.
Use the included package content to automatically create a Routine Maintenance request every time
a maintenance request of type Repair or Routine Maintenance is updated to Closed. 
Follow the specifications and naming conventions outlined in the business requirements*/


MAINTENANCEREUEST.AXPT
 trigger MaintenanceRequest on Case (before update, after update) {
    //ToDo: Call MaintenanceRequestHelper.updateWorkOrders
    if(trigger.isAfter){
        MaintenanceRequestHelper.updateWorkOrders();    
    }
}

MAINTENANCEREUESTHELPER.APXC
public with sharing class MaintenanceRequestHelper {
    public static void updateWorkOrders() {
        List<case> newCaseList = new List<case>();
        Integer avgAmount=10000;
        
        List<Equipment_Maintenance_Item__c> newEMI = new List<Equipment_Maintenance_Item__c>();
        List<case> caseList = [SELECT id,Vehicle__c,Subject,ProductID,Product__c, (SELECT id from Equipment_Maintenance_Items__r) from case where status='closed' and Type IN ('Repair', 'Routine Maintenance') and ID IN :Trigger.new LIMIT 200];
        Map<id,Equipment_Maintenance_Item__c> equip = new map<id,Equipment_Maintenance_Item__c>([Select ID, Equipment__c, Quantity__c,Equipment__r.id,Equipment__r.Maintenance_Cycle__c from Equipment_Maintenance_Item__c ]);
        for(case c: caseList){
            case newCase = new Case();
            newCase.Type = 'Routine Maintenance';
            newCase.Status = 'New';
            newCase.Vehicle__c = c.Vehicle__c;
            newCase.Subject =  String.isBlank(c.Subject) ? 'Routine Maintenance Request' : c.Subject;
            newCase.Date_Reported__c = Date.today();
            newCase.ProductId = c.ProductId;
            newCase.Product__c = c.Product__c;
            newCase.parentID = c.Id;
            
            
            for(Equipment_Maintenance_Item__c emi : c.Equipment_Maintenance_Items__r ){
                avgAmount = Math.min(avgAmount,Integer.valueOf(equip.get(emi.id).Equipment__r.Maintenance_Cycle__c));
                newEMI.add(new Equipment_Maintenance_Item__c(
                    Equipment__c = equip.get(emi.id).Equipment__c,
                    Maintenance_Request__c = c.id,
                    Quantity__c = equip.get(emi.id).Quantity__c));
            }
            Date dueDate = date.TODAY().adddays(avgAmount);
            newCase.Date_Due__c =dueDate;
            newCaseList.add(newCase);
            
        }
        if(newCaseList.size()>0){
            Database.insert(newCaseList);    
        }
        
        for(Case c2: newCaseList){
            for(Equipment_Maintenance_Item__c emi2 : newEmi){
                if(c2.parentID == emi2.Maintenance_Request__c){
                    emi2.Maintenance_Request__c = c2.id;    
                }
            }
        }
        
        if(newEmi.size()>0){
            Database.insert(newEmi);    
        }     
    }        
}



MAINTENANCEREUESTHELPERTEST.APXC
@isTest
public with sharing class MaintenanceRequestHelperTest {
     @isTest static void testPositive(){
        Product2 prod = new Product2();
        prod.Name = 'Test';
        prod.Maintenance_Cycle__c = 200;
        Insert prod;
        Case cs = new Case();
        cs.Status = 'New';
        cs.Origin = 'Web';
        cs.Equipment__c = prod.Id;
        cs.Subject ='Test Positive';
        Insert cs;
        cs.status = 'Closed';
        cs.Type = 'Routine Maintenance';
        update cs;
    }
    @isTest static void testNegative(){
        Product2 prod = new Product2();
        prod.Name = 'Test';
        prod.Maintenance_Cycle__c = 200;
        Insert prod;
        Case cs = new Case();
        cs.Status = 'New';
        cs.Origin = 'Web';
        cs.Subject ='Test Positive';
        Insert cs;
        cs.status = 'Closed';
        cs.Type = 'Routine Maintenance';
        update cs;
    }
    @isTest static void testBulk(){
        Product2 prod = new Product2();
        prod.Name = 'Test';
        prod.Maintenance_Cycle__c = 200;
        Insert prod;
        List<Case> caseList = new List<Case>();
        for(Integer i=0;i<300;i++){
            Case cs = new Case();
            cs.Status = 'New';
            cs.Origin = 'Web';
            cs.Subject ='Test Positive';
            cs.Equipment__c = prod.Id;
            caseList.add(cs);
        }
        Insert caseList;
        for(Case obj : caseList){
            obj.Type = 'Routine Maintenance';
            obj.Status = 'Closed';
        }
        update caseList;
    }
}
